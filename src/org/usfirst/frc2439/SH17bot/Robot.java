// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2439.SH17bot;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc2439.SH17bot.commands.*;
import org.usfirst.frc2439.SH17bot.subsystems.*;
//import net.java.games.input.Component;
//import net.java.games.input.Controller;
//import net.java.games.input.ControllerEnvironment;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Transmission transmission;
    public static DriveTrain driveTrain;
    public static Shooter shooter;
    public static GearHandler gearHandler;
    public static Winch winch;
    public static Nav nav;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	/* 
    	// Nothing functional
    	Controller[] controllers;
    	Component[] components;
    	
    	controllers = ControllerEnvironment.getDefaultEnvironment().getControllers();
    	for(int i = 0; i < controllers.length; i++) {
    		System.out.println("Controller " + controllers[i].getName() + " is of type " + controllers[i].getType().toString());
    		components = controllers[i].getComponents();
    		for(int j = 0; j < components.length; j++) {
    			System.out.println(" Component #" + " : " + components[i].getName());
    		}
    	}
    	
    	Controller mouse = null;
    	Component xAxis = null;
    	Component yAxis = null;
    	
    	controllers = ControllerEnvironment.getDefaultEnvironment().getControllers();
    	for(int i = 0; i < controllers.length; i++) {
    		if(controllers[i].getType() == Controller.Type.MOUSE) {
    			mouse = controllers[i];
    		}
    	}
    	
    	if(mouse != null) {
    		components = mouse.getComponents();
    		for(int i = 0; i < components.length; i++) {
        		if(components[i].getName() == "X") {
        			xAxis = components[i];
        		}
        		
        		if(components[i].getName() == "Y") {
        			yAxis = components[i];
        		}
        	}	
    	}
    	
    	if(xAxis != null && yAxis != null) {
    		while(true) {
    			mouse.poll();
    			
    			System.out.println("X: " + xAxis.getPollData() + "\tY: " + yAxis.getPollData());
    			Timer.delay(.5);
    		}
    	}
    	*/
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        transmission = new Transmission();
        driveTrain = new DriveTrain();
        shooter = new Shooter();
        gearHandler = new GearHandler();
        winch = new Winch();
        nav = new Nav();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCMD();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
