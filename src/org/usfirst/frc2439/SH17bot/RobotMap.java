// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2439.SH17bot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DoubleSolenoid transmissionLF_SOL;
    public static DoubleSolenoid transmissionRF_SOL;
    public static DoubleSolenoid transmissionLR_SOL;
    public static DoubleSolenoid transmissionRR_SOL;
    public static Encoder driveTrainLeftENC;
    public static Encoder driveTrainRightENC;
    public static SpeedController driveTrainLF_MOT;
    public static SpeedController driveTrainRF_MOT;
    public static SpeedController driveTrainLR_MOT;
    public static SpeedController driveTrainRR_MOT;
    public static RobotDrive driveTrainControl;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        transmissionLF_SOL = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("Transmission", "LF_SOL", transmissionLF_SOL);
        
        transmissionRF_SOL = new DoubleSolenoid(0, 2, 3);
        LiveWindow.addActuator("Transmission", "RF_SOL", transmissionRF_SOL);
        
        transmissionLR_SOL = new DoubleSolenoid(0, 4, 5);
        LiveWindow.addActuator("Transmission", "LR_SOL", transmissionLR_SOL);
        
        transmissionRR_SOL = new DoubleSolenoid(0, 6, 7);
        LiveWindow.addActuator("Transmission", "RR_SOL", transmissionRR_SOL);
        
        driveTrainLeftENC = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "LeftENC", driveTrainLeftENC);
        driveTrainLeftENC.setDistancePerPulse(1.0);
        driveTrainLeftENC.setPIDSourceType(PIDSourceType.kRate);
        driveTrainRightENC = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "RightENC", driveTrainRightENC);
        driveTrainRightENC.setDistancePerPulse(1.0);
        driveTrainRightENC.setPIDSourceType(PIDSourceType.kRate);
        driveTrainLF_MOT = new TalonSRX(0);
        LiveWindow.addActuator("DriveTrain", "LF_MOT", (TalonSRX) driveTrainLF_MOT);
        
        driveTrainRF_MOT = new TalonSRX(1);
        LiveWindow.addActuator("DriveTrain", "RF_MOT", (TalonSRX) driveTrainRF_MOT);
        
        driveTrainLR_MOT = new TalonSRX(2);
        LiveWindow.addActuator("DriveTrain", "LR_MOT", (TalonSRX) driveTrainLR_MOT);
        
        driveTrainRR_MOT = new TalonSRX(3);
        LiveWindow.addActuator("DriveTrain", "RR_MOT", (TalonSRX) driveTrainRR_MOT);
        
        driveTrainControl = new RobotDrive(driveTrainLF_MOT, driveTrainLR_MOT,
              driveTrainRF_MOT, driveTrainRR_MOT);
        
        driveTrainControl.setSafetyEnabled(true);
        driveTrainControl.setExpiration(0.1);
        driveTrainControl.setSensitivity(0.5);
        driveTrainControl.setMaxOutput(1.0);
        driveTrainControl.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        driveTrainControl.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
}
}
